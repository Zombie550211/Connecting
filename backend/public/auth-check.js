/**
 * Verifica si el usuario est√° autenticado antes de permitir el acceso a la p√°gina.
 * Redirige a la p√°gina de login si no hay un token v√°lido.
 */

(function() {
  'use strict';

  // Lista de rutas p√∫blicas que no requieren autenticaci√≥n
  const rutasPublicas = [
    '/login.html',
    '/index.html',
    '/'
  ];

  // Verificar si la ruta actual es p√∫blica
  const esRutaPublica = rutasPublicas.some(ruta => 
    window.location.pathname.endsWith(ruta)
  );

  if (esRutaPublica) {
    return; // No hacer verificaci√≥n en rutas p√∫blicas
  }

  // Funci√≥n para verificar el token
  async function verificarToken() {
    const token = localStorage.getItem('token');
    
    if (!token) {
      console.warn('‚ùå No se encontr√≥ token de autenticaci√≥n');
      redirigirALogin();
      return false;
    }

    try {
      console.log('üîç Verificando token...');
      const response = await fetch('/api/auth/verificar-token', {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
          'Cache-Control': 'no-cache',
          'Pragma': 'no-cache'
        },
        credentials: 'include', // Importante para incluir cookies de sesi√≥n
        cache: 'no-store' // Evitar cach√©
      });

      console.log('üîç Respuesta del servidor:', response.status, response.statusText);

      if (!response.ok) {
        // Si el error es 401 (No autorizado), redirigir al login
        if (response.status === 401) {
          console.warn('‚ö†Ô∏è Token inv√°lido o expirado');
          localStorage.removeItem('token'); // Limpiar token inv√°lido
          document.cookie = 'token=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;';
          throw new Error('Sesi√≥n expirada o inv√°lida');
        }
        throw new Error(`Error en la verificaci√≥n: ${response.statusText}`);
      }

      const data = await response.json();
      console.log('üîç Datos de autenticaci√≥n:', data);
      
      if (data.success && data.usuario) {
        console.log('‚úÖ Usuario autenticado:', data.usuario);
        // Actualizar el token en localStorage si se envi√≥ uno nuevo
        if (data.token) {
          localStorage.setItem('token', data.token);
        }
        return true;
      } else {
        throw new Error('Respuesta de autenticaci√≥n inv√°lida');
      }
    } catch (error) {
      console.error('‚ùå Error al verificar el token:', error.message);
      redirigirALogin();
      return false;
    }
  }

  // Funci√≥n para redirigir al login
  function redirigirALogin() {
    // Guardar la URL actual para redirigir despu√©s del login
    const returnUrl = encodeURIComponent(window.location.pathname + window.location.search);
    window.location.href = `/login.html?returnUrl=${returnUrl}`;
  }

  // Ejecutar la verificaci√≥n cuando se carga la p√°gina
  document.addEventListener('DOMContentLoaded', verificarToken);

  // Tambi√©n verificar peri√≥dicamente (cada 5 minutos)
  setInterval(verificarToken, 5 * 60 * 1000);
})();
